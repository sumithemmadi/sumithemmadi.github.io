# -*- coding: utf-8 -*-
"""UI20CS21_NLP_LAB1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mUsBH_3GWIERt2bdxh4JJiZFXZNMCdft
"""

! pip install numpy torch pandas transformers scikit-learn seaborn matplotlib

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import tensorflow as tf
from sklearn.metrics import confusion_matrix
import seaborn as sns
import nltk
from nltk.corpus import stopwords
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import classification_report

nltk.download('stopwords')
sw_nltk = stopwords.words('english')

df=pd.read_csv('spam.csv', encoding="ISO-8859-1")

display(df)

df.drop(df.columns[[2,3,4]],axis=1,inplace=True)

display(df)

print(sw_nltk)

df['stopword'] = df['v2'].apply(lambda x: ' '.join([word for word in x.split() if word not in (sw_nltk)]))
df

from nltk.stem.porter import PorterStemmer
porter = PorterStemmer()
tf=TfidfVectorizer()
classifier = MultinomialNB()

df['stemming'] = df['v2'].apply(lambda x: ' '.join([porter.stem(word) for word in x.split()]))

from nltk.stem import WordNetLemmatizer
nltk.download('wordnet')
nltk.download('omw-1.4')
lemmatizer = WordNetLemmatizer()

def lemmatize_words(text):
    return " ".join([lemmatizer.lemmatize(word) for word in text.split()])

df['lemmatize']=df['v2'].apply(lambda x: ' '.join([lemmatizer.lemmatize(word) for word in x.split()]))
df['st+stem'] = df['stopword'].apply(lambda x: ' '.join([porter.stem(word) for word in x.split()]))
df['stem+lemm']=df['stemming'].apply(lambda x: ' '.join([lemmatizer.lemmatize(word) for word in x.split()]))
df['all'] = df['stem+lemm'].apply(lambda x: ' '.join([word for word in x.split() if word not in (sw_nltk)]))

display(df)

df.to_csv('generate.csv')

X=tf.fit_transform(df['stopword']).toarray()
y=df.iloc[:,0].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2, random_state=42)

from sklearn.naive_bayes import MultinomialNB
mnb = MultinomialNB(alpha=0.8)
mnb.fit(X_train,y_train)
y_pred_1=mnb.predict(X_test)

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(random_state=4)
rfc.fit(X_train,y_train)
y_pred_11=rfc.predict(X_test)

print("Naive_Bayes")
print(classification_report(y_test, y_pred_1))

print("Random_Forest")
print(classification_report(y_test, y_pred_11))

cm=confusion_matrix(y_test,y_pred_1)
cm1=confusion_matrix(y_test,y_pred_11)
sns.heatmap(cm,
            annot=True,
            fmt='g',
            xticklabels=['spam','ham'],
            yticklabels=['spam','ham'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Naive Bayes',fontsize=17)
plt.show()

sns.heatmap(cm1,
            annot=True,
            fmt='g',
            xticklabels=['spam','ham'],
            yticklabels=['spam','ham'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Random_Forest',fontsize=17)
plt.show()

X=tf.fit_transform(df['stemming']).toarray()
y=df.iloc[:,0].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2, random_state=42)

from sklearn.naive_bayes import MultinomialNB
mnb = MultinomialNB(alpha=0.8)
mnb.fit(X_train,y_train)
y_pred_2=mnb.predict(X_test)

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(random_state=4)
rfc.fit(X_train,y_train)
y_pred_22=rfc.predict(X_test)

print("Naive_Bayes")
print(classification_report(y_test, y_pred_2))

print("Random_Forest")
print(classification_report(y_test, y_pred_22))

cm=confusion_matrix(y_test,y_pred_2)
cm1=confusion_matrix(y_test,y_pred_22)
sns.heatmap(cm,
            annot=True,
            fmt='g',
            xticklabels=['spam','ham'],
            yticklabels=['spam','ham'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Naive Bayes',fontsize=17)
plt.show()

sns.heatmap(cm1,
            annot=True,
            fmt='g',
            xticklabels=['spam','ham'],
            yticklabels=['spam','ham'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Random_Forest',fontsize=17)
plt.show()

X=tf.fit_transform(df['lemmatize']).toarray()
y=df.iloc[:,0].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2, random_state=42)

from sklearn.naive_bayes import MultinomialNB
mnb = MultinomialNB(alpha=0.8)
mnb.fit(X_train,y_train)
y_pred_3=mnb.predict(X_test)

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(random_state=4)
rfc.fit(X_train,y_train)
y_pred_33=rfc.predict(X_test)

print("Naive_Bayes")
print(classification_report(y_test, y_pred_3))

print("Random_Forest")
print(classification_report(y_test, y_pred_33))

cm=confusion_matrix(y_test,y_pred_3)
cm1=confusion_matrix(y_test,y_pred_33)
sns.heatmap(cm,
            annot=True,
            fmt='g',
            xticklabels=['spam','ham'],
            yticklabels=['spam','ham'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Naive Bayes',fontsize=17)
plt.show()

sns.heatmap(cm1,
            annot=True,
            fmt='g',
            xticklabels=['spam','ham'],
            yticklabels=['spam','ham'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Random_Forest',fontsize=17)
plt.show()

X=tf.fit_transform(df['st+stem']).toarray()
y=df.iloc[:,0].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2, random_state=42)

from sklearn.naive_bayes import MultinomialNB
mnb = MultinomialNB(alpha=0.8)
mnb.fit(X_train,y_train)
y_pred_4=mnb.predict(X_test)

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(random_state=4)
rfc.fit(X_train,y_train)
y_pred_44=rfc.predict(X_test)

print("Naive_Bayes")
print(classification_report(y_test, y_pred_4))

print("Random_Forest")
print(classification_report(y_test, y_pred_44))

cm=confusion_matrix(y_test,y_pred_4)
cm1=confusion_matrix(y_test,y_pred_44)
sns.heatmap(cm,
            annot=True,
            fmt='g',
            xticklabels=['spam','ham'],
            yticklabels=['spam','ham'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Naive Bayes',fontsize=17)
plt.show()

sns.heatmap(cm1,
            annot=True,
            fmt='g',
            xticklabels=['spam','ham'],
            yticklabels=['spam','ham'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Random_Forest',fontsize=17)
plt.show()

X=tf.fit_transform(df['stem+lemm']).toarray()
y=df.iloc[:,0].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2, random_state=42)

from sklearn.naive_bayes import MultinomialNB
mnb = MultinomialNB(alpha=0.8)
mnb.fit(X_train,y_train)
y_pred_5=mnb.predict(X_test)

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(random_state=4)
rfc.fit(X_train,y_train)
y_pred_55=rfc.predict(X_test)

print("Naive_Bayes")
print(classification_report(y_test, y_pred_5))

print("Random_Forest")
print(classification_report(y_test, y_pred_55))

cm=confusion_matrix(y_test,y_pred_5)
cm1=confusion_matrix(y_test,y_pred_55)
sns.heatmap(cm,
            annot=True,
            fmt='g',
            xticklabels=['spam','ham'],
            yticklabels=['spam','ham'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Naive Bayes',fontsize=17)
plt.show()

sns.heatmap(cm1,
            annot=True,
            fmt='g',
            xticklabels=['spam','ham'],
            yticklabels=['spam','ham'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Random_Forest',fontsize=17)
plt.show()

X=tf.fit_transform(df['all']).toarray()
y=df.iloc[:,0].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2, random_state=42)

from sklearn.naive_bayes import MultinomialNB
mnb = MultinomialNB(alpha=0.8)
mnb.fit(X_train,y_train)
y_pred_6=mnb.predict(X_test)

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(random_state=4)
rfc.fit(X_train,y_train)
y_pred_66=rfc.predict(X_test)

print("All")
print("Naive_Bayes")
print(classification_report(y_test, y_pred_6))

print("Random_Forest")
print(classification_report(y_test, y_pred_66))

cm=confusion_matrix(y_test,y_pred_6)
cm1=confusion_matrix(y_test,y_pred_66)
sns.heatmap(cm,
            annot=True,
            fmt='g',
            xticklabels=['spam','ham'],
            yticklabels=['spam','ham'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Naive Bayes',fontsize=17)
plt.show()

sns.heatmap(cm1,
            annot=True,
            fmt='g',
            xticklabels=['spam','ham'],
            yticklabels=['spam','ham'])
plt.ylabel('Prediction',fontsize=13)
plt.xlabel('Actual',fontsize=13)
plt.title('Random_Forest',fontsize=17)
plt.show()