# -*- coding: utf-8 -*-
"""UI20CS21_NLP_LAB4_parser

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12BXSsSVrS_bgYj6OgMvJOe-jaCHO0blk
"""

!pip install constituent-treelib nltk

import nltk
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
from nltk import pos_tag, word_tokenize, RegexpParser
from IPython.display import display
import nltk
from nltk import CFG

grammar = CFG.fromstring("""
    S -> NP VP
    NP -> Det N
    VP -> V NP
    Det -> 'the' | 'and'
    N -> 'dog' | 'cat' | 'food'
    V -> 'ate' | 'played'
""")

sentence = "the dog ate the food"

tokens = sentence.split()

parser_top_down = nltk.ChartParser(grammar)
for tree in parser_top_down.parse(tokens):
    print("Top-Down:")
    print(tree)
    display(tree)
    levels = {}
    for level, subtree in enumerate(tree.subtrees(), start=1):
        if level == 1:
            levels[level] = [subtree.label()]
        else:
            parent_level = level - 1
            parent_label = levels[parent_level][-1]
            levels.setdefault(level, []).append(f"{parent_label}({subtree.label()})")
    for level, symbols in levels.items():
        print(f"Level {level}: {' '.join(symbols)}")

parser_bottom_up = nltk.EarleyChartParser(grammar)
for tree in parser_bottom_up.parse(tokens):
    print("Bottom-Up:")
    display(tree)
    print(tree)

    levels = {}
    for level, subtree in enumerate(tree.subtrees(), start=1):
        levels.setdefault(level, []).append(subtree)
    for level in reversed(sorted(levels.keys())):
        subtrees = levels[level]
        print(f"Level {level}: {', '.join(str(subtree) for subtree in subtrees)}")